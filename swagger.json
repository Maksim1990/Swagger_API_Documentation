{
  "swagger": "2.0",
  "info": {
    "description": "Discoveringworld API documentation <br><br>In order to `Register new user` follow this link  [http://swagger.io](http://swagger.io).<br><br>In order to get `Authorization Token` follow this link  [http://swagger.io](http://swagger.io).<br> For authorization value use following combination word `Bearer`+`spase`+`Authorization Token`<br><br> Athentication token should be added in header in each REST API request.",
    "version": "1.0.0",
    "title": "Discoveringworld API documentation",
    "contact": {
      "email": "narushevich.maksim@gmail.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "host": "discoveringworld.net",
  "basePath": "/restserver/api/v1",
  "tags": [
    {
      "name": "Books",
      "description": "All information about Books",
      "externalDocs": {
        "description": "Find out more",
        "url": "http://swagger.io"
      }
    }
  ],
  "schemes": [
    "http"
  ],
  "paths": {
    "/books": {
      "get": {
        "tags": [
          "Books"
        ],
        "summary": "Display all books",
        "description": "Display all books",
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Books"
        ],
        "summary": "Add book",
        "description": "This can only be done by the logged in user.",
        "operationId": "addBook",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "title",
            "in": "formData",
            "description": "New book title",
            "required": true,
            "type": "string"
          },
          {
            "name": "detail",
            "in": "formData",
            "description": "New book detail",
            "required": true,
            "type": "string"
          },
          {
            "name": "author",
            "in": "formData",
            "description": "Author of new book",
            "required": false,
            "type": "string"
          },
          {
            "name": "category_id",
            "in": "formData",
            "description": "Category id of new book",
            "required": false,
            "type": "integer"
          },
          {
            "name": "date",
            "in": "formData",
            "description": "Date of finished reading book",
            "required": false,
            "type": "integer"
          },
          {
            "name": "publish_year",
            "in": "formData",
            "description": "Year of publishing book",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid book supplied"
          },
          "404": {
            "description": "Book not found"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/books/{id}": {
      "get": {
        "tags": [
          "Books"
        ],
        "summary": "Get specific book by ID",
        "description": "",
        "operationId": "getBook",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Book ID to get",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Book not found"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "Books"
        ],
        "summary": "Updated book",
        "description": "This can only be done by the logged in user.",
        "operationId": "updateBook",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Book ID to get",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "title",
            "in": "query",
            "description": "Book title need to be updated",
            "required": false,
            "type": "string"
          },
          {
            "name": "detail",
            "in": "query",
            "description": "Book detail need to be updated",
            "required": false,
            "type": "string"
          },
          {
            "name": "author",
            "in": "query",
            "description": "Author of new book",
            "required": false,
            "type": "string"
          },
          {
            "name": "date",
            "in": "query",
            "description": "Date of finished reading book",
            "required": false,
            "type": "string"
          },
          {
            "name": "published_year",
            "in": "query",
            "description": "Year of publishing book",
            "required": false,
            "type": "string"
          },
          {
            "name": "category_id",
            "in": "query",
            "description": "Category id of new movie",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid user supplied"
          },
          "404": {
            "description": "User not found"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Books"
        ],
        "summary": "Deletes a book",
        "description": "",
        "operationId": "deleteBook",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Book id to delete",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Book not found"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/movies": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Display all movies",
        "description": "Display all movies",
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Movies"
        ],
        "summary": "Add movie",
        "description": "This can only be done by the logged in user.",
        "operationId": "addMovie",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "title",
            "in": "formData",
            "description": "New movie title",
            "required": true,
            "type": "string"
          },
          {
            "name": "detail",
            "in": "formData",
            "description": "New movie detail",
            "required": true,
            "type": "string"
          },
          {
            "name": "author",
            "in": "formData",
            "description": "Author of new movie",
            "required": false,
            "type": "string"
          },
          {
            "name": "finished_date",
            "in": "formData",
            "description": "Date of finished watching movie",
            "required": false,
            "type": "string"
          },
          {
            "name": "movie_created_year",
            "in": "formData",
            "description": "Year of movie creation",
            "required": false,
            "type": "string"
          },
          {
            "name": "category_id",
            "in": "formData",
            "description": "Category id of new movie",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid movie supplied"
          },
          "404": {
            "description": "Movie not found"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/movies/{id}": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Get specific movie by ID",
        "description": "",
        "operationId": "getMovie",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Movie ID to get",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Movie not found"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "Movies"
        ],
        "summary": "Updated movie",
        "description": "This can only be done by the logged in user.",
        "operationId": "updateMovie",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Movie ID to get",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "title",
            "in": "query",
            "description": "Book title need to be updated",
            "required": false,
            "type": "string"
          },
          {
            "name": "detail",
            "in": "query",
            "description": "Book detail need to be updated",
            "required": false,
            "type": "string"
          },
          {
            "name": "author",
            "in": "query",
            "description": "Author of new movie",
            "required": false,
            "type": "string"
          },
          {
            "name": "finished_date",
            "in": "query",
            "description": "Date of finished watching movie",
            "required": false,
            "type": "string"
          },
          {
            "name": "movie_created_year",
            "in": "query",
            "description": "Year of movie creation",
            "required": false,
            "type": "string"
          },
          {
            "name": "category_id",
            "in": "query",
            "description": "Category id of new movie",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid movie supplied"
          },
          "404": {
            "description": "Movie not found"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Movies"
        ],
        "summary": "Deletes a movie",
        "description": "",
        "operationId": "deleteMovie",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Movie id to delete",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Movie not found"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/products": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Display all product",
        "description": "Display all products",
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Products"
        ],
        "summary": "Add product",
        "description": "This can only be done by the logged in user.",
        "operationId": "addProduct",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "formData",
            "description": "New product title",
            "required": true,
            "type": "string"
          },
          {
            "name": "detail",
            "in": "formData",
            "description": "New product detail",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid product supplied"
          },
          "404": {
            "description": "Product not found"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/products/{id}": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Get specific product by ID",
        "description": "",
        "operationId": "getProduct",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Product ID to get",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Product not found"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "Products"
        ],
        "summary": "Updated product",
        "description": "This can only be done by the logged in user.",
        "operationId": "updateProduct",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Movie ID to get",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "name",
            "in": "query",
            "description": "Product title need to be updated",
            "required": false,
            "type": "string"
          },
          {
            "name": "detail",
            "in": "query",
            "description": "Product detail need to be updated",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid movie supplied"
          },
          "404": {
            "description": "Movie not found"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Products"
        ],
        "summary": "Deletes a product",
        "description": "",
        "operationId": "deletProduct",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Product id to delete",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Product not found"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/users": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Display all users",
        "description": "Display all users",
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/users/{id}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get specific product by ID",
        "description": "",
        "operationId": "getUser",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User ID to get",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "User not found"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Updated user",
        "description": "This can only be done by the logged in user.",
        "operationId": "updateUser",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Movie ID to get",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "name",
            "in": "query",
            "description": "User name",
            "required": false,
            "type": "string"
          },
          {
            "name": "email",
            "in": "query",
            "description": "User email",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid movie supplied"
          },
          "404": {
            "description": "User not found"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Deletes a user",
        "description": "",
        "operationId": "deletUser",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Product id to delete",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Product not found"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/users/{id}/books": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "All books of specific user by user ID",
        "description": "",
        "operationId": "getUserBooks",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User ID to get",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "User not found"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/users/{id}/movies": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "All movies of specific user by user ID",
        "description": "",
        "operationId": "getUserMovies",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User ID to get",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "User not found"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    }
  },
  "securityDefinitions": {
    "Bearer": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "definitions": {
    "User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "username": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "userStatus": {
          "type": "integer",
          "format": "int32",
          "description": "User Status"
        }
      },
      "xml": {
        "name": "User"
      }
    },
    "Book": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "user_id": {
          "type": "integer"
        },
        "detail": {
          "type": "string"
        },
        "author": {
          "type": "string"
        },
        "category_id": {
          "type": "integer"
        },
        "date": {
          "type": "string"
        },
        "publish_year": {
          "type": "string"
        },
        "created_at": {
          "type": "string",
          "description": "Date of book creation"
        },
        "updated_at": {
          "type": "string",
          "description": "Date of book updates"
        }
      },
      "xml": {
        "name": "Book"
      }
    },
    "Movie": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "user_id": {
          "type": "integer"
        },
        "detail": {
          "type": "string"
        },
        "author": {
          "type": "string"
        },
        "category_id": {
          "type": "integer"
        },
        "finished_date": {
          "type": "string"
        },
        "movie_created_year": {
          "type": "string"
        },
        "created_at": {
          "type": "string",
          "description": "Date of movie creation"
        },
        "updated_at": {
          "type": "string",
          "description": "Date of movie updates"
        }
      },
      "xml": {
        "name": "Movie"
      }
    },
    "Product": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "detail": {
          "type": "string"
        },
        "created_at": {
          "type": "string",
          "description": "Date of movie creation"
        },
        "updated_at": {
          "type": "string",
          "description": "Date of movie updates"
        }
      },
      "xml": {
        "name": "Product"
      }
    },
    "ApiResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "type": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    }
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  }
}